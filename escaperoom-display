#!/usr/bin/env python

'''
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, version 3.
 This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.
'''

import asyncio, json, argparse
from aiohttp import web
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *


class Label(QLabel):

    def __init__(self, font_size=36):

        super().__init__('')

        self.setFont(QFont('Inconsolata', font_size))
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.setAlignment(Qt.AlignCenter)
        self.setWordWrap(True)

        self.setStyleSheet('QLabel {color: #00ff00; }')

        self.shadow = QGraphicsDropShadowEffect()
        self.shadow.setBlurRadius(52)
        self.shadow.setColor(QColor(0, 255, 0, 180))
        self.shadow.setXOffset(0)
        self.shadow.setYOffset(0)
        self.setGraphicsEffect(self.shadow)


        shadow = QGraphicsDropShadowEffect()


class Chronometer(Label):

    @classmethod
    def cut_seconds(cls, seconds):
        hours, remaining = divmod(seconds, 3600)
        minutes, seconds = divmod(remaining, 60)
        return int(hours), int(minutes), int(seconds)

    def __init__(self):

        super().__init__()

        self.running = False
        self.seconds = 0.0
        self._elapsed_time = QElapsedTimer()
        self._timer = QTimer(self, interval=100, timeout=self._update)
        self._timer.timeout.connect(self._update)
        self._timer.start()

    def setCurrentState(self, state):
        self._current_state = state
        self.stateChanged.emit(state)

    def set(self, running, seconds):
        self._elapsed_time.start()
        self.running = running
        self.seconds = seconds

    @pyqtSlot()
    def _update(self):
        seconds = self.seconds
        if self.running:
            seconds += self._elapsed_time.elapsed()/1000
        h, m, s = self.cut_seconds(seconds)
        self.setText(f'{h:02}:{m:02}:{s:02}')


class ClueLabel(Label):

    def __init__(self):

        super().__init__()


class MainWindow(QMainWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.create_layout()
        self.set_background_color()
        self.showFullScreen()

    def set_background_color(self):
        pal = QPalette()
        pal.setColor(QPalette.Background, QColor(24, 20, 20))
        self.setAutoFillBackground(True)
        self.setPalette(pal)

    def create_layout(self):
        self.chronometer = Chronometer()
        self.chronometer.setFont(QFont('Inconsolata', 80, QFont.Bold))
        self.chronometer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.chronometer.setAlignment(Qt.AlignCenter)

        self.clue = ClueLabel()

        layout = QVBoxLayout()
        layout.addWidget(self.chronometer)
        layout.addWidget(self.clue)
        widget = QWidget()
        widget.setLayout(layout)
        self.setCentralWidget(widget)

    def connect_server(self, server):
        server.signals.received_clue.connect(self.set_clue)
        server.signals.clear_clues.connect(self.clear)
        server.signals.received_chronometer.connect(self.chronometer.set)

    def set_clue(self, text):
        self.clue.setText(text)

    def clear(self):
        self.clue.setText('')


class ServerSignals(QObject):
    received_clue = pyqtSignal(str)
    clear_clues = pyqtSignal()
    received_chronometer = pyqtSignal(bool, float)


class Server(QRunnable):

    def __init__(self, host, port):
        super().__init__()
        self.host = host;
        self.port = port;
        self.signals = ServerSignals()
        self.app = web.Application()
        self.app.add_routes([web.post('/', self.handle_post)])

    @pyqtSlot()
    def run(self):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        runner = web.AppRunner(self.app)
        loop.run_until_complete(runner.setup())
        site = web.TCPSite(runner, self.host, self.port)
        loop.run_until_complete(site.start())
        print(f'Server on {self.host}:{self.port}')
        loop.run_forever()

    async def handle_post(self, request):
        params = await request.json()
        if params['type'] == 'clue':
            self.signals.received_clue.emit(params['text'])
        elif params['type'] == 'chronometer':
            running, seconds = params['running'], params['seconds']
            self.signals.received_chronometer.emit(running, seconds)
        return web.Response(content_type='application/json', text='done')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='EscapeRoom server')
    parser.add_argument('--host', type=str, default='0.0.0.0',
        help='Host for the HTTP server (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=8081,
            help='Port for HTTP server (default: 8080)')
    args = parser.parse_args()

    app = QApplication([])
    window = MainWindow()
    window.setFixedSize(app.desktop().screenGeometry().size())
    server = Server(host=args.host, port=args.port)
    window.connect_server(server)
    pool = QThreadPool()
    pool.start(server)
    app.exec()

